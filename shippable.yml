# Language setting
language: python

# Version number
python:
  - 2.7

build:
  pre_ci_boot:
    image_name: drydock/u16pytall
    image_tag: master
    pull: true
    options: '--privileged=true --net=bridge'
  ci:
    - python --version
 
resources:
#cliconfig resources to verify account integration 
  - name: cli_awsKeys
    type: cliConfig
    integration: ghOrgAccIntAwsKeys
    
  - name: cli_dockerRegistry
    type: cliConfig
    integration: ghOrgAccIntDockerRegistry
    
  - name: cli_gcl
    type: cliConfig
    integration: ghOrgAccIntGoogleCloud
    
  - name: cli_jfrog
    type: cliConfig
    integration: ghOrgAccIntJfrogArtifactory
  
  - name: cli_kubernetes
    type: cliConfig
    integration: ghOrgAccIntKubernetes
    
  - name: cli_quay
    type: cliConfig
    integration: ghOrgAccIntQuay
    
  - name: orgPublicRepo
    type: gitRepo
    integration: gh
    pointer:
      sourceName: "auto-org/org_public"
      branch: master
  
  - name: image_shipctl
    type: image
    integration: ghOrgAccIntDockerRegistry
    pointer:
      sourceName: "shippabledocker/pipelinev2"
    seed:
      versionName: "deploy.1"
      
  - name: int_slack
    type: integration
    integration: ghOrgAccIntSlack
  
  - name: int_keyValuePair
    type: integration
    integration: ghOrgAccIntKeyValuePair
    
  - name: params_shipctl
    type: params
    version:
      params:
        test1: param1
        
  - name: state_shipctl
    type: state

jobs:
# job that checks all the account integrations 
  - name: test_accIntegration_run
    type: runSh
    steps:
    #  - IN: cli_awsKeys
      #- IN: cli_awsKeys
      #  scope:
     #     - ecr
      - IN: cli_dockerRegistry
    #  - IN: cli_gcl
     # - IN: cli_gcl
     #   scope:
     #     - gcr
     # - IN: cli_gcl
     #   scope:
     #     - gke
     # - IN: cli_jfrog
     # - IN: cli_kubernetes
     # - IN: cli_quay
      - TASK:        
      #  - script: echo CLI_AWSKEYS_INTEGRATION_ACCESSKEY=$CLI_AWSKEYS_INTEGRATION_ACCESSKEY
       # - script: echo CLI_AWSKEYS_INTEGRATION_SECRETKEY=${#CLI_AWSKEYS_INTEGRATION_SECRETKEY}
       # - script: echo CLI_AWSKEYS_NAME=$CLI_AWSKEYS_NAME
       # - script: echo CLI_AWSKEYS_ID=$CLI_AWSKEYS_ID
      #  - script: echo CLI_AWSKEYS_TYPE=$CLI_AWSKEYS_TYPE
      #  - script: echo CLI_AWSKEYS_INTEGRATION_TYPE=$CLI_AWSKEYS_INTEGRATION_TYPE
       # - script: echo CLI_AWSKEYS_OPEARATION=$CLI_AWSKEYS_OPERATION
       # - script: echo CLI_AWSKEYS_PATH=$CLI_AWSKEYS_PATH
       # - script: echo CLI_AWSKEYS_POINTER_REGION=$CLI_AWSKEYS_POINTER_REGION
       # - script: echo CLI_AWSKEYS_POINTER_CLUSTERNAME=$CLI_AWSKEYS_POINTER_CLUSTERNAME
       # - script: echo CLI_AWSKEYS_VERSIONNUMBER=$CLI_AWSKEYS_VERSIONNUMBER
       # - script: echo CLI_AWSKEYS_VERSIONNAME=$CLI_AWSKEYS_VERSIONNAME
       # - script: echo CLI_AWSKEYS_VERSIONID=$CLI_AWSKEYS_VERSIONID
     #   - script: docker pull 742038439709.dkr.ecr.us-west-2.amazonaws.com/sample_node
       
        - script: docker pull shippabledocker/sample_node_pvt:ecr
        - script: echo CLI_DOCKER_INTEGRATION_URL=$CLI_DOCKER_INTEGRATION_URL
        - script: echo CLI_DOCKER_INTEGRATION_USERNAME=$CLI_DOCKER_INTEGRATION_USERNAME
        - script: echo CLI_DOCKER_INTEGRATION_PASSWORD=${#CLI_DOCKER_INTEGRATION_PASSWORD}
        - script: echo CLI_DOCKER_INTEGRATION_EMAIL=$CLI_DOCKER_INTEGRATION_EMAIL
        
      #  - script: echo CLI_GCL_INTEGRATION_JSON_KEY=${#CLI_GCL_INTEGRATION_JSON_KEY}
      #  - script: docker pull gcr.io/vidya-project/node1-img:master.33
     
      #  - script: echo CLI_JFROG_INTEGRATION_URL=$CLI_JFROG_INTEGRATION_URL
      #  - script: echo CLI_JFROG_INTEGRATION_USERNAME=$CLI_JFROG_INTEGRATION_USERNAME
      #  - script: echo CLI_JFROG_INTEGRATION_PASSWORD=${#CLI_JFROG_INTEGRATION_PASSWORD}
      #  - script: jfrog rt dl test-jfrog-ship/testoct.sh
       
       # - script: echo CLI_KUBERNETES_INTEGRATION_KUBECONFIGCONTENT=${#CLICONFIGKUBERNETES_INTEGRATION_KUBECONFIGCONTENT}
       # - script: kubectl version
       
       # - script: echo CLI_QUAY_INTEGRATION_ACCESSTOKEN=${#CLI_QUAY_INTEGRATION_ACCESSTOKEN}
       # - script: echo CLI_QUAY_INTEGRATION_USERNAME=$CLI_QUAY_INTEGRATION_USERNAME
       # - script: echo CLI_QUAY_INTEGRATION_PASSWORD=${#CLI_QUAY_INTEGRATION_PASSWORD}
       # - script: echo CLI_QUAY_INTEGRATION_EMAIL=$CLI_QUAY_INTEGRATION_EMAIL
       # - script: docker pull quay.io/revathird/samplenode_test

  - name: test_shipctl_run
    type: runSh
    steps:
      - IN: orgPublicRepo
      - IN: int_slack
      - IN: cli_dockerRegistry
      - IN: params_shipctl
      - OUT: state_shipctl
      - TASK:        
          script: 
            - MY_UPPERCASE="$(shipctl to_uppercase "foo!@#")"
            - echo MY_UPPERCASE=$MY_UPPERCASE
            - if [ "$MY_UPPERCASE" == "FOO!@#" ]; then echo 'success'; else test; fi
            - MY_SANITIZED_STRING="$(shipctl sanitize_shippable_string "foo!@#")"
            - echo MY_SANITIZED_STRING=$MY_SANITIZED_STRING
            - if [ "$MY_SANITIZED_STRING" == "foo" ]; then echo 'success'; else test; fi
            - shipctl retry "echo 'Hello'"
            - shipctl replace "IN/orgPublicRepo/gitRepo/properties.json" "IN/orgPublicRepo/gitRepo/run.json"
            - cat "IN/orgPublicRepo/gitRepo/run.json"
            - shipctl get_json_value "IN/orgPublicRepo/gitRepo/properties.json" "properties[0].env1"
                   
           
            - MY_NEW_VERSION="$(shipctl bump_version v1.0.0 minor)"
            - echo MY_NEW_VERSION=$MY_NEW_VERSION
            - if [ "$MY_NEW_VERSION" == "v1.1.0" ]; then echo 'success'; else test; fi
            
            - MY_GET_PARAMS_RESOURCE="$(shipctl get_params_resource "params_shipctl" "test1")"
            - echo MY_GET_PARAMS_RESOURCE=$MY_GET_PARAMS_RESOURCE
            - if [ "$MY_GET_PARAMS_RESOURCE" == "param1" ]; then echo 'success'; else test; fi

            - MY_GET_INTEGRATION_RESOURCE_FIELD="$(shipctl get_integration_resource_field "cli_dockerRegistry" "username")"
            - if [ "$MY_GET_INTEGRATION_RESOURCE_FIELD" == "shippabledocker" ]; then echo 'success'; else test; fi
            
            - MY_GET_INTEGRATION_RESOURCE_KEYS="$(shipctl get_integration_resource_keys "int_slack")"
            - echo MY_GET_INTEGRATION_RESOURCE_KEYS=$MY_GET_INTEGRATION_RESOURCE_KEYS            
            - if [ "$MY_GET_INTEGRATION_RESOURCE_KEYS" == "webhookUrl" ]; then echo 'success'; else test; fi
            
            - MY_GET_INTEGRATION_RESOURCE="$(shipctl get_integration_resource "int_slack" "masterName")"
            - echo MY_GET_INTEGRATION_RESOURCE=$MY_GET_INTEGRATION_RESOURCE
            - if [ "$MY_GET_INTEGRATION_RESOURCE" == "slackKey" ]; then echo 'success'; else test; fi 
            
            - MY_GET_RESOURCE_VERSION_KEY="$(shipctl get_resource_version_key "test_shipctl_run" "key1")"
            - echo MY_GET_RESOURCE_VERSION_KEY=$MY_GET_RESOURCE_VERSION_KEY
            - if [ "$MY_GET_RESOURCE_VERSION_KEY" == "value1" ]; then echo 'success'; else test; fi

  - name: test_stateShipctl_run
    type: runSh
    steps:
      - IN: state_shipctl
      - TASK:        
          script: 
            - echo "runsh for state resource to test shipctl commands"
            
