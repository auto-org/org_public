# Language setting
language: python

# Version number
python:
  - 2.7

build:
  pre_ci_boot:
    image_name: drydock/u16pytall
    image_tag: master
    pull: true
    options: '--privileged=true --net=bridge'
    
  ci:
    - python --version
 
resources:
#cliconfig resources to verify account integration 
  - name: cli_awsKeys
    type: cliConfig
    integration: ghOrgAccIntAwsKeys
    
  - name: cli_dockerRegistry
    type: cliConfig
    integration: ghOrgAccIntDockerRegistry
    
  - name: cli_gcl
    type: cliConfig
    integration: ghOrgAccIntGoogleCloud
    
  - name: cli_jfrog
    type: cliConfig
    integration: ghOrgAccIntJfrogArtifactory
  
  - name: cli_kubernetes
    type: cliConfig
    integration: ghOrgAccIntKubernetes
    
  - name: cli_quay
    type: cliConfig
    integration: ghOrgAccIntQuay
    
  - name: orgPublicRepo
    type: gitRepo
    integration: gh
    pointer:
      sourceName: "auto-org/org_public"
      branch: master
  
  #- name: image_shipctl
  #  type: image
  #  integration: ghOrgAccIntDockerRegistry
  #  pointer:
  #    sourceName: "shippabledocker/pipelinev2"
  #  seed:
  #    versionName: "deploy.1"
      
  - name: int_slack
    type: integration
    integration: intSlack
  
  - name: int_docker
    type: integration
    integration: intDockerRegistry
    
 # - name: int_keyValuePair
 #   type: integration
 #   integration: ghOrgAccIntKeyValuePair
    
  - name: params_shipctl
    type: params
    version:
      params:
        test1: param1
        
 # - name: state_shipctl
 #   type: state

jobs:
# job that checks all the account integrations 
  - name: test_accIntegration_run
    type: runSh
    steps:
    #  - IN: cli_awsKeys
      #- IN: cli_awsKeys
      #  scope:
     #     - ecr
      - IN: cli_dockerRegistry
    #  - IN: cli_gcl
     # - IN: cli_gcl
     #   scope:
     #     - gcr
     # - IN: cli_gcl
     #   scope:
     #     - gke
     # - IN: cli_jfrog
     # - IN: cli_kubernetes
     # - IN: cli_quay
      - TASK:        
      #  - script: echo CLI_AWSKEYS_INTEGRATION_ACCESSKEY=$CLI_AWSKEYS_INTEGRATION_ACCESSKEY
       # - script: echo CLI_AWSKEYS_INTEGRATION_SECRETKEY=${#CLI_AWSKEYS_INTEGRATION_SECRETKEY}
       # - script: echo CLI_AWSKEYS_NAME=$CLI_AWSKEYS_NAME
       # - script: echo CLI_AWSKEYS_ID=$CLI_AWSKEYS_ID
      #  - script: echo CLI_AWSKEYS_TYPE=$CLI_AWSKEYS_TYPE
      #  - script: echo CLI_AWSKEYS_INTEGRATION_TYPE=$CLI_AWSKEYS_INTEGRATION_TYPE
       # - script: echo CLI_AWSKEYS_OPEARATION=$CLI_AWSKEYS_OPERATION
       # - script: echo CLI_AWSKEYS_PATH=$CLI_AWSKEYS_PATH
       # - script: echo CLI_AWSKEYS_POINTER_REGION=$CLI_AWSKEYS_POINTER_REGION
       # - script: echo CLI_AWSKEYS_POINTER_CLUSTERNAME=$CLI_AWSKEYS_POINTER_CLUSTERNAME
       # - script: echo CLI_AWSKEYS_VERSIONNUMBER=$CLI_AWSKEYS_VERSIONNUMBER
       # - script: echo CLI_AWSKEYS_VERSIONNAME=$CLI_AWSKEYS_VERSIONNAME
       # - script: echo CLI_AWSKEYS_VERSIONID=$CLI_AWSKEYS_VERSIONID
     #   - script: docker pull 742038439709.dkr.ecr.us-west-2.amazonaws.com/sample_node
       
        - script: docker pull shippabledocker/sample_node_pvt:ecr
        - script: echo CLI_DOCKER_INTEGRATION_URL=$CLI_DOCKER_INTEGRATION_URL
        - script: echo CLI_DOCKER_INTEGRATION_USERNAME=$CLI_DOCKER_INTEGRATION_USERNAME
        - script: echo CLI_DOCKER_INTEGRATION_PASSWORD=${#CLI_DOCKER_INTEGRATION_PASSWORD}
        - script: echo CLI_DOCKER_INTEGRATION_EMAIL=$CLI_DOCKER_INTEGRATION_EMAIL
        
      #  - script: echo CLI_GCL_INTEGRATION_JSON_KEY=${#CLI_GCL_INTEGRATION_JSON_KEY}
      #  - script: docker pull gcr.io/vidya-project/node1-img:master.33
     
      #  - script: echo CLI_JFROG_INTEGRATION_URL=$CLI_JFROG_INTEGRATION_URL
      #  - script: echo CLI_JFROG_INTEGRATION_USERNAME=$CLI_JFROG_INTEGRATION_USERNAME
      #  - script: echo CLI_JFROG_INTEGRATION_PASSWORD=${#CLI_JFROG_INTEGRATION_PASSWORD}
      #  - script: jfrog rt dl test-jfrog-ship/testoct.sh
       
       # - script: echo CLI_KUBERNETES_INTEGRATION_KUBECONFIGCONTENT=${#CLICONFIGKUBERNETES_INTEGRATION_KUBECONFIGCONTENT}
       # - script: kubectl version
       
       # - script: echo CLI_QUAY_INTEGRATION_ACCESSTOKEN=${#CLI_QUAY_INTEGRATION_ACCESSTOKEN}
       # - script: echo CLI_QUAY_INTEGRATION_USERNAME=$CLI_QUAY_INTEGRATION_USERNAME
       # - script: echo CLI_QUAY_INTEGRATION_PASSWORD=${#CLI_QUAY_INTEGRATION_PASSWORD}
       # - script: echo CLI_QUAY_INTEGRATION_EMAIL=$CLI_QUAY_INTEGRATION_EMAIL
       # - script: docker pull quay.io/revathird/samplenode_test

  - name: test_shipctl_run
    type: runSh
    steps:
      - IN: orgPublicRepo
      - IN: int_docker
      - TASK:        
          script:
            - wd=10
            - len=20
            
            - MY_STATE_PATH=$(shipctl get_resource_state job1)
            - ls -lah $MY_STATE_PATH
            - ls -lah /var/lib/shippable/build
            - ls -lah /var/lib/shippable/build/previousState
            - cat $MY_STATE_PATH/job1.env  
            
            - shipctl post_resource_state_multi job1 "width=$wd length=$len"
            - cat $MY_STATE_PATH/job1.env 
            
            - ls -lah
            - pwd
            
            - echo "job1's .txt file using in shipctl a=1 b=2" > myfile.txt
            - cat /var/lib/shippable/build/myfile.txt
            - cat /var/lib/shippable/build/previousState/myfile.txt
            
            - shipctl copy_file_from_prev_state myfile.txt myfilestate.txt
            - cmp --silent previousState/myfile.txt myfilestate.txt || making Job Fail Since copy_file_from_prev_state shipctl commmand not working
            
            - shipctl copy_file_to_state /var/lib/shippable/build/myfile.txt
            - cmp --silent /var/lib/shippable/build/myfile.txt /var/lib/shippable/build/state/myfile.txt || making Job Fail Since copy_file_to_state commmand not working
            
            - shipctl refresh_file_to_state /var/lib/shippable/build/message.json
            - cmp --silent /var/lib/shippable/build/message.json /var/lib/shippable/build/state/message.json || making Job Fail Since refresh_file_to_state commmand not working
            
            - MY_GET_RESOURCE_POINTER_KEY=$(shipctl get_resource_pointer_key ctl_img sourceName)
            - echo MY_GET_RESOURCE_POINTER_KEY=$MY_GET_RESOURCE_POINTER_KEY
            - if [ "$MY_GET_RESOURCE_POINTER_KEY" == "nginx" ]; then echo 'success'; else test; fi
            
            - MY_GET_INTEGRATION_RESOURCE_KEYS=$(shipctl get_integration_resource_keys ctl_img)
            - echo MY_GET_INTEGRATION_RESOURCE_KEYS=$MY_GET_INTEGRATION_RESOURCE_KEYS
            
            - MY_GET_INTEGRATION_KEYS=$(shipctl get_integration_keys docker)
            - echo MY_GET_INTEGRATION_KEYS=$MY_GET_INTEGRATION_KEYS
            
            - MY_GET_GIT_CHANGES=$(shipctl get_git_changes --resource="orgPublicRepo") #--directories-only) #--depth=1)
            - echo MY_GET_GIT_CHANGES=$MY_GET_GIT_CHANGES
            - if [ "$MY_GET_GIT_CHANGES" == "shippable.yml" ]; then echo 'success'; else test; fi
            
            - MY_GET_JSON_VALUE=$(shipctl get_json_value "IN/ctl_sameRepo/gitRepo/properties.json" "properties[0].property1")
            - echo MY_GET_JSON_VALUE=$MY_GET_JSON_VALUE
            - if [ "$MY_GET_JSON_VALUE" == "value1" ]; then echo 'success'; else test; fi
            - if [ "$MY_GET_GIT_CHANGES" == "shippable.yml" ]; then echo 'success'; else test; fi
            
            - MY_NOTIFY=$(shipctl notify ctl_slackNotify --recipient="@shiptest-rc-ow") #couldn't verify
            - echo MY_NOTIFY=$MY_NOTIFY
            
            - MY_SANITIZED_STRING="$(shipctl sanitize_shippable_string "&^%_test12rc_34{':>?|release!@56)(*&")"
            - echo MY_SANITIZED_STRING=$MY_SANITIZED_STRING
            - if [ "$MY_SANITIZED_STRING" == "_test12rc_34release56" ]; then echo 'success'; else test; fi
            
            - MY_UPPERCASE="$(shipctl to_uppercase "&^test12rc_34{:>?|release!@56)(*&")"
            - echo MY_UPPERCASE=$MY_UPPERCASE
            - if [ "$MY_UPPERCASE" == "&^TEST12RC_34{:>?|RELEASE!@56)(*&" ]; then echo 'success'; else test; fi
            
            - ls -lah $MY_STATE_PATH
            - ls -lah  
    
  - name: test_shipctl_run2
    type: runSh
    steps:
      - IN: params_shipctl
      - IN: test_shipctl_run
      - IN: int_slack
      - IN: orgPublicRepo
        switch: off
      - TASK:
          script: 
            - pwd
            - ls -lah
            - ls -lah /var/lib/shippable/build/state
            
            - shipctl copy_file_from_resource_state job1 myfile.txt test.txt
            - ls -lah /var/lib/shippable/build/state
           # - cat /var/lib/shippable/build/test.txt #not required
            - cmp --silent /build/IN/job1/runSh/myfile.txt test.txt || making Job Fail Since copy_file_from_resource_state shipctl commmand not working
            
            - ls -lah
            
            - cat /var/lib/shippable/build/state/ctl_params.env
            #- MY_GET_RESOURCE_VERSION_KEY_TEST=$(shipctl get_resource_version_key "ctl_params" "TEST") #this is not working
            #- echo MY_GET_RESOURCE_VERSION_KEY_TEST=$MY_GET_RESOURCE_VERSION_KEY_TEST
            
            - MY_GET_PARAMS_RESOURCE=$(shipctl get_params_resource ctl_params TEST)
            - echo MY_GET_PARAMS_RESOURCE=$MY_GET_PARAMS_RESOURCE
            - if [ "$MY_GET_PARAMS_RESOURCE" == "rc" ]; then echo 'success'; else testfail; fi
            
            - shipctl post_resource_state ctl_params KEY2 env2
            - cmp --silent shippable/build/state/ctl_params.env KEY2=env2 || making Job Fail Since post_resource_state commmand not working
            
            - echo GET_POST_RESOURCE_STATE=$GET_POST_RESOURCE_STATE
            - if [ "$GET_POST_RESOURCE_STATE" == "KEY2=env2" ]; then echo 'success'; else testfail; fi
            - shipctl put_resource_state ctl_params KEY3 e3 #this appends to existng data
           # - MY_GET_RESOURCE_VERSION_KEY_TEST=$(shipctl get_resource_version_key "ctl_params" "KEY3")
            
            - cat /var/lib/shippable/build/state/ctl_params.env
            - MY_GET_RESOURCE_ID=$(shipctl get_resource_id ctl_params)
            - if [ "$MY_GET_RESOURCE_ID" == "17465" ]; then echo 'success'; else testfail; fi
           
            - MY_GET_RESOURCE_META=$(shipctl get_resource_meta "ctl_params") #this is not working
            - MY_GET_RESOURCE_ENV_TYPE=$(shipctl get_resource_env job2 type) 
            - if [ "$MY_GET_RESOURCE_ENV_TYPE" == "runSh" ]; then echo 'success'; else testfail; fi
            
            - MY_GET_RESOURCE_NAME=$(shipctl get_resource_name ctl_params)
            - echo MY_GET_RESOURCE_NAME=$MY_GET_RESOURCE_NAME
            - if [ "$MY_GET_RESOURCE_NAME" == "CTL_PARAMS" ]; then echo 'success'; else testfail; fi
           
            - MY_GET_RESOURCE_TYPE=$(shipctl get_resource_type job2)
            - echo MY_GET_RESOURCE_TYPE=$MY_GET_RESOURCE_TYPE
            - if [ "$MY_GET_RESOURCE_TYPE" == "runSh" ]; then echo 'success'; else testfail; fi
           
            - MY_GET_RESOURCE_OPERATION=$(shipctl get_resource_operation ctl_params)
            - echo MY_GET_RESOURCE_OPERATION=$MY_GET_RESOURCE_OPERATION
            - if [ "$MY_GET_RESOURCE_OPERATION" == "IN" ]; then echo 'success'; else test; fi
            
            - MY_GET_RESOURCE_STATE=$(shipctl get_resource_state "job1")
            - echo MY_GET_RESOURCE_STATE=$MY_GET_RESOURCE_STATE
           # - if [ "$MY_GET_RESOURCE_NAME" == "/var/lib/shippable/build/IN/job1/runSh" ]; then echo 'success'; else test; fi #this is not working 
            
            - MY_GET_RESOURCE_VERSION_ID=$(shipctl get_resource_version_id ctl_params)
            - echo MY_GET_RESOURCE_VERSION_ID=$MY_GET_RESOURCE_VERSION_ID
            - if [ "$MY_GET_RESOURCE_VERSION_ID" == "90810" ]; then echo 'success'; else testfail; fi
            
            - MY_GET_RESOURCE_VERSION_NUMBER="$(shipctl get_resource_version_number ctl_params)"
            - echo MY_GET_RESOURCE_VERSION_NUMBER=$MY_GET_RESOURCE_VERSION_NUMBER
            - if [ "$MY_GET_RESOURCE_VERSION_NUMBER" == "3" ]; then echo 'success'; else testfail; fi
            
            - MY_GET_INTEGRATION_RESOURCE=$(shipctl get_integration_resource ctl_slack)
            - echo MY_GET_INTEGRATION_RESOURCE=$MY_GET_INTEGRATION_RESOURCE
           ## - if [ "$MY_GET_INTEGRATION_RESOURCE" == "{"id":"5b2b4926d23b3106004a2982","masterName":"slackKey","webhookUrl":"https://hooks.slack.com/services/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"}" ]; then echo 'success'; else test; fi #this couldn't verify
            
            - MY_GET_INTEGRATION_RESOURCE_KEYS=$(shipctl get_integration_resource_keys ctl_slack)
            - echo MY_GET_INTEGRATION_RESOURCE_KEYS=$MY_GET_INTEGRATION_RESOURCE_KEYS
            - MY_NEW_BUMP_VERSION="$(shipctl bump_version v1.0.0 major)"
            - echo MY_NEW_BUMP_VERSION=$MY_NEW_BUMP_VERSION
            - if [ "$MY_NEW_BUMP_VERSION" == "v2.0.0" ]; then echo 'success'; else testfail; fi
            
           # - MY_DECRYPT=$(shipctl decrypt "key.json" "IN/ctl_sameRepo/gitRepo/key.json") #not working
           # - echo MY_DECRYPT=$MY_DECRYPT
           # - if [ "$MY_DECRYPT" == "value4" ]; then echo 'success'; else testfail; fi                  
